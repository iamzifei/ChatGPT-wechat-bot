# name: deploy to lambda
# on: [push]
# jobs:
#   deploy_source:
#     name: build and deploy lambda
#     strategy:
#       matrix:
#         node-version: [16.x]
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v2
#       - name: Use Node.js ${{ matrix.node-version }}
#         uses: actions/setup-node@v1
#         with:
#           node-version: ${{ matrix.node-version }}
#       # - name: npm install and build
#       #   run: |
#       #     npm ci
#       #     npm run build --if-present
#       #   env:
#       #     CI: true
#       # - name: zip
#       #   uses: montudor/action-zip@v0.1.0
#       #   with:
#       #     args: zip -qq -r ./bundle.zip ./
#       - name: setup SAM
#         uses: aws-actions/setup-sam@v1
#       - name: config AWS credentials
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ap-southeast-2
#           # function_name: ig_trading_grid_nasdaq
#           # zip_file: bundle.zip
#       - run: sam build --use-container
#       - name: default deploy
#         run: sam deploy --no-confirm-changeset --no-fail-on-empty-changeset --stack-name sam-ig-trading --s3-bucket iamzifei85-trading-lambda --capabilities CAPABILITY_IAM --region ap-southeast-2

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# GitHub recommends pinning actions to a commit SHA.
# To get a newer version, you will need to update the SHA.
# You can also reference a tag or branch, but the action may change without warning.

name: Deploy to Amazon ECS

on:
  push:
    branches:
      - master

env:
  AWS_REGION: us-east-2 # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: chatgpt-wechat-bot # set this to your Amazon ECR repository name
  ECS_SERVICE: chatgpt-wechat-bot # set this to your Amazon ECS service name
  ECS_CLUSTER: chatgpt-wechat-bot # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION:
    ./aws-task-definition.json # set this to the path to your Amazon ECS task definition
    # file, e.g. .aws/task-definition.json
  CONTAINER_NAME:
    chatgpt-wechat-bot # set this to the name of the container in the
    # containerDefinitions section of your task definition

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    # environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@13d241b293754004c80624b5567555c4a39ffbe3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@aaf69d68aa3fb14c1d5a6be9ac61fe15b48453a2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          # reference: https://stackoverflow.com/questions/70828205/pushing-an-image-to-ecr-getting-retrying-in-seconds to add correct permission before push to ECR
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@97587c9d45a4930bf0e3da8dd2feb2a463cf4a3a
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@de0132cf8cdedb79975c6d42b77eb7ea193cf28e
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
